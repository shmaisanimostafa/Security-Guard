// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Security_Guard.Models;

#nullable disable

namespace Security_Guard.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Security_Guard.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisLikeCount")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ReadCount")
                        .HasColumnType("int");

                    b.Property<string>("SourceURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Do you want to see the sea? This your best Hotel",
                            DisLikeCount = 0,
                            ImageURL = "file://C:/Users/shmai/source/repos/Security%20Guard/wwwroot/Neighbors/Bitdefender.png",
                            IsFeatured = false,
                            LikeCount = 0,
                            PublishDate = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5243),
                            Rating = 3,
                            ReadCount = 0,
                            SourceURL = "https://www.bitdefender.com/",
                            Summary = "A brief summary on the article",
                            Tags = "[]",
                            Title = "Bitdefender"
                        },
                        new
                        {
                            Id = 2,
                            Content = "The best for the best. The place where you can exercise your hiking and other sports.",
                            DisLikeCount = 0,
                            ImageURL = "file://C:/Users/shmai/source/repos/Security_Guard/wwwroot/Neighbors/Dr.Web.png",
                            IsFeatured = false,
                            LikeCount = 0,
                            PublishDate = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5253),
                            Rating = 5,
                            ReadCount = 0,
                            SourceURL = "https://www.drweb.com/",
                            Summary = "A brief summary on the article",
                            Tags = "[]",
                            Title = "Dr.Web"
                        },
                        new
                        {
                            Id = 7,
                            Content = "> Hi \n # What do you have today \n \"Good\" `Morning`  ",
                            DisLikeCount = 0,
                            ImageURL = "file://C:/Users/shmai/source/repos/Security_Guard/wwwroot/Neighbors/Dr.Web.png",
                            IsFeatured = false,
                            LikeCount = 0,
                            PublishDate = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5259),
                            Rating = 5,
                            ReadCount = 0,
                            SourceURL = "https://www.drweb.com/",
                            Summary = "A brief summary on the article",
                            Tags = "[]",
                            Title = "Markdown"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Sleep for cheap. Cheapest Hotel you may ever found",
                            DisLikeCount = 0,
                            ImageURL = "https://c4.wallpaperflare.com/wallpaper/813/904/915/hotel-new-york-statue-of-liberty-in-las-vegas-nevada-usa-hd-desktop-wallpaper-1920%C3%971200-wallpaper-preview.jpg",
                            IsFeatured = false,
                            LikeCount = 0,
                            PublishDate = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5264),
                            Rating = 4,
                            ReadCount = 0,
                            SourceURL = "https://www.eset.com/",
                            Summary = "A brief summary on the article",
                            Tags = "[]",
                            Title = "eset"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Do you want to see the sea? This your best Hotel",
                            DisLikeCount = 0,
                            ImageURL = "https://wallpapershome.com/images/pages/ico_h/655.jpg",
                            IsFeatured = false,
                            LikeCount = 0,
                            PublishDate = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5269),
                            Rating = 3,
                            ReadCount = 0,
                            SourceURL = "https://me-en.kaspersky.com/",
                            Summary = "A brief summary on the article",
                            Tags = "[]",
                            Title = "Kaspersky"
                        },
                        new
                        {
                            Id = 5,
                            Content = "The best for the best. The place where you can exercise your hiking and other sports.",
                            DisLikeCount = 0,
                            ImageURL = "https://www.thesouthafrican.com/wp-content/uploads/2022/07/hotel-800x529.png",
                            IsFeatured = false,
                            LikeCount = 0,
                            PublishDate = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5275),
                            Rating = 1,
                            ReadCount = 0,
                            SourceURL = "https://phishtank.org/",
                            Summary = "A brief summary on the article",
                            Tags = "[]",
                            Title = "PhishTank"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Sleep for cheap. Cheapest Hotel you may ever found",
                            DisLikeCount = 0,
                            ImageURL = "https://wallpapercave.com/wp/wp12549190.jpg",
                            IsFeatured = false,
                            LikeCount = 0,
                            PublishDate = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5280),
                            Rating = 2,
                            ReadCount = 0,
                            SourceURL = "https://www.virustotal.com/gui/home/upload",
                            Summary = "A brief summary on the article",
                            Tags = "[]",
                            Title = "VirusTotal"
                        });
                });

            modelBuilder.Entity("Security_Guard.Models.File", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(4230),
                            FileName = "Virus.pdf",
                            StatusMessage = "",
                            URL = "www.virus.com",
                            UserName = "Mostafa"
                        },
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(4290),
                            FileName = "Malware.pdf",
                            StatusMessage = "",
                            URL = "www.malware.ar",
                            UserName = "Mostafa"
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(4296),
                            FileName = "potato.pdf",
                            StatusMessage = "",
                            URL = "www.potato.me",
                            UserName = "Mostafa"
                        },
                        new
                        {
                            Id = 3,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(4301),
                            FileName = "Virus.pdf",
                            StatusMessage = "",
                            URL = "www.virus.com",
                            UserName = "Mostafa"
                        },
                        new
                        {
                            Id = 4,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(4306),
                            FileName = "Malware.pdf",
                            StatusMessage = "",
                            URL = "www.malware.ar",
                            UserName = "Mostafa"
                        },
                        new
                        {
                            Id = 5,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(4312),
                            FileName = "potato.pdf",
                            StatusMessage = "",
                            URL = "www.potato.me",
                            UserName = "Mostafa"
                        });
                });

            modelBuilder.Entity("Security_Guard.Models.Link", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Links");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5141),
                            Status = "danger",
                            StatusMessage = "",
                            URL = "www.pdf.com.lb.mu.edu",
                            UserName = "Mostafa"
                        },
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5153),
                            Status = "safe",
                            StatusMessage = "",
                            URL = "www.trojans.ar",
                            UserName = "Mostafa"
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5161),
                            Status = "ambigious",
                            StatusMessage = "",
                            URL = "www.malosd.me",
                            UserName = "Mostafa"
                        });
                });

            modelBuilder.Entity("Security_Guard.Models.Report", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScanId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ThreatLevel")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Security_Guard.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Security_Guard_API.Models.Message", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<bool>("IsAi")
                        .HasColumnType("bit");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            IsAi = false,
                            Sender = "Mostafa",
                            Text = "Hello",
                            Time = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5363)
                        },
                        new
                        {
                            Id = 1,
                            IsAi = true,
                            Sender = "AI",
                            Text = "Hi",
                            Time = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5371)
                        },
                        new
                        {
                            Id = 2,
                            IsAi = false,
                            Sender = "Mostafa",
                            Text = "How are you?",
                            Time = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5377)
                        },
                        new
                        {
                            Id = 3,
                            IsAi = true,
                            Sender = "AI",
                            Text = "I'm fine",
                            Time = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5382)
                        },
                        new
                        {
                            Id = 4,
                            IsAi = false,
                            Sender = "Mostafa",
                            Text = "Good",
                            Time = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5388)
                        },
                        new
                        {
                            Id = 5,
                            IsAi = true,
                            Sender = "AI",
                            Text = "Bye",
                            Time = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5392)
                        },
                        new
                        {
                            Id = 6,
                            IsAi = false,
                            Sender = "Mostafa",
                            Text = "Bye",
                            Time = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5398)
                        },
                        new
                        {
                            Id = 7,
                            IsAi = true,
                            Sender = "AI",
                            Text = "Goodbye",
                            Time = new DateTime(2024, 8, 14, 4, 16, 48, 58, DateTimeKind.Local).AddTicks(5403)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Security_Guard.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Security_Guard.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Security_Guard.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Security_Guard.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
