@page "/file"
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Files Management</PageTitle>

<h1>Files Management</h1>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}
else
{
    <!-- Display Files Counts -->
    <h2>Files Summary</h2>

    <span class="badge text-bg-info">Total File Scans: @fileScans</span>
    <span class="badge text-bg-danger">Danger Files: @dangerFilesCount</span>
    <span class="badge text-bg-success">Safe Files: @safeFilesCount</span>
    <span class="badge text-bg-warning">Ambiguous Files: @ambiguousFilesCount</span>

    <!-- Display Files -->
    <h2>Files</h2>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>File Name</th>
                <th>URL</th>
                <th>Status</th>
                <th>Status Message</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>@file.Id</td>
                    <td>@file.FileName</td>
                    <td>@file.URL</td>
                    <td class="@GetStatusClass(file.Status)">@file.Status</td>
                    <td>@file.StatusMessage</td>
                    <td>
                        <button class="btn btn-outline-danger" @onclick="() => DeleteFile(file.Id.Value)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Add File Form -->
    <h2>Add File</h2>
    <EditForm Model="newFile" OnValidSubmit="AddFile">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="fileName">File Name:</label>
            <InputText id="fileName" class="form-control" @bind-Value="newFile.FileName" />
        </div>
        <div class="form-group">
            <label for="url">URL:</label>
            <InputText id="url" class="form-control" @bind-Value="newFile.URL" />
        </div>
        <div class="form-group">
            <label for="status">Status:</label>
            <InputText id="status" class="form-control" @bind-Value="newFile.Status" />
        </div>
        <div class="form-group">
            <label for="statusMessage">Status Message:</label>
            <InputText id="statusMessage" class="form-control" @bind-Value="newFile.StatusMessage" />
        </div>
        <button type="submit" class="btn btn-primary">Add File</button>
    </EditForm>
}

@code {

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "safe" => "text-success",
            "ambiguous" => "text-warning",
            "danger" => "text-danger",
            _ => string.Empty // Default case if status does not match any of the above
        };
    }
    private List<Shared.Models.File>? files;
    private Shared.Models.File newFile = new Shared.Models.File();
    private string? errorMessage;
    private bool loading = true;

    // File counts
    private int dangerFilesCount = 0;
    private int ambiguousFilesCount = 0;
    private int safeFilesCount = 0;
    private int fileScans = 0;

    // When the component is initialized, it will call the LoadData method to load the data.
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    // The LoadData method will make an HTTP GET request to the API to get the list of files.
    private async Task LoadData()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            files = await httpClient.GetFromJsonAsync<List<Shared.Models.File>>("api/AdminDashboardApi/files");

            // Update file counts after loading data
            CountFileStatuses();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Request error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void CountFileStatuses()
    {
        if (files != null)
        {
            dangerFilesCount = files.Count(file => file.Status == "danger");
            ambiguousFilesCount = files.Count(file => file.Status == "ambiguous");
            safeFilesCount = files.Count(file => file.Status == "safe");
            fileScans = dangerFilesCount + ambiguousFilesCount + safeFilesCount;
        }
    }

    private async Task AddFile()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.PostAsJsonAsync("api/AdminDashboardApi/files", newFile);

            if (response.IsSuccessStatusCode)
            {
                await LoadData();
                newFile = new Shared.Models.File(); // Reset form
            }
            else
            {
                errorMessage = $"Error adding file: {response.ReasonPhrase}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Request error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }

    private async Task DeleteFile(int id)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.DeleteAsync($"api/AdminDashboardApi/files/{id}");

            if (response.IsSuccessStatusCode)
            {
                await LoadData();
            }
            else
            {
                errorMessage = $"Error deleting file: {response.ReasonPhrase}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Request error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }
}
