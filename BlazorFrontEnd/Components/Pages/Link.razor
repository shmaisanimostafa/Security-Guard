@page "/link"
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS

<PageTitle>Links Management</PageTitle>

<h1>Links Management</h1>

@if (links == null)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}
else
{
    <!-- Display Links Counts -->
    <h2>Links Summary</h2>

    <span class="badge text-bg-info">Total Link Scans: @linkScans</span>
    <span class="badge text-bg-danger">Danger Links: @dangerLinksCount</span>
    <span class="badge text-bg-success">Safe Links: @safeLinksCount</span>
    <span class="badge text-bg-warning">Ambiguous Links: @ambiguousLinksCount</span>


    <!-- Display Links -->
    <h2>Links</h2>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>URL</th>
                <th>Status</th>
                <th>Status Message</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var link in links)
            {
                <tr>
                    <td>@link.Id</td>
                    <td>@link.URL</td>
                    <td>@link.Status</td>
                    <td>@link.StatusMessage</td>
                    <td>
                        <button class="btn btn-outline-danger" @onclick="() => DeleteLink(link.Id.Value)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Add Link Form -->
    <h2>Add Link</h2>
    <EditForm Model="newLink" OnValidSubmit="AddLink">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="url">URL:</label>
            <InputText id="url" class="form-control" @bind-Value="newLink.URL" />
        </div>
        <div class="form-group">
            <label for="status">Status:</label>
            <InputText id="status" class="form-control" @bind-Value="newLink.Status" />
        </div>
        <div class="form-group">
            <label for="statusMessage">Status Message:</label>
            <InputText id="statusMessage" class="form-control" @bind-Value="newLink.StatusMessage" />
        </div>
        <button type="submit" class="btn btn-primary">Add Link</button>
    </EditForm>
}

@code {
    private List<Shared.Models.Link>? links;

    private Shared.Models.Link newLink = new Shared.Models.Link();
    private string? errorMessage;

    // Link counts
    private int dangerLinksCount = 0;
    private int ambiguousLinksCount = 0;
    private int safeLinksCount = 0;
    private int linkScans = 0;

    protected override async Task OnInitializedAsync()
    {
        
        await LoadData();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("setTheme(getPreferredTheme())");
    }
    private async Task LoadData()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            links = await httpClient.GetFromJsonAsync<List<Shared.Models.Link>>("api/AdminDashboardApi/links");

            // Update link counts after loading data
            CountLinkStatuses();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Request error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }

    }

    private void CountLinkStatuses()
    {
        if (links != null)
        {
            dangerLinksCount = links.Count(link => link.Status == "danger");
            ambiguousLinksCount = links.Count(link => link.Status == "ambiguous");
            safeLinksCount = links.Count(link => link.Status == "safe");
            linkScans = dangerLinksCount + ambiguousLinksCount + safeLinksCount;
        }
    }

    private async Task AddLink()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.PostAsJsonAsync("api/AdminDashboardApi/links", newLink);

            if (response.IsSuccessStatusCode)
            {
                await LoadData();
                newLink = new Shared.Models.Link(); // Reset form
            }
            else
            {
                errorMessage = $"Error adding link: {response.ReasonPhrase}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Request error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }

    private async Task DeleteLink(int id)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.DeleteAsync($"api/AdminDashboardApi/links/{id}");

            if (response.IsSuccessStatusCode)
            {
                await LoadData();
            }
            else
            {
                errorMessage = $"Error deleting link: {response.ReasonPhrase}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Request error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }
}
